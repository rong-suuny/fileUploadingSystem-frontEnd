{"ast":null,"code":"// const BASE_URL = \"http://localhost:8000/api\"; // Replace with your backend API base URL\n\n// export const updateFiles = async (\n//   userName,\n//   files,\n//   setUpdateStatus,\n//   setFiles\n// ) => {\n//   try {\n//     setUpdateStatus(\"updating\");\n//     const formData = new FormData();\n//     formData.append(\"userName\", userName);\n//     Array.from(files).forEach((file) => formData.append(\"files\", file));\n\n//     const response = await fetch(`${BASE_URL}/update-files/`, {\n//       method: \"PUT\",\n//       body: formData,\n//     });\n\n//     if (response.ok) {\n//       setFiles(null);\n//       setUpdateStatus(\"success\");\n//     } else {\n//       setUpdateStatus(\"fail\");\n//     }\n//   } catch (error) {\n//     console.error(\"Update failed:\", error);\n//     setUpdateStatus(\"fail\");\n//   }\n// };\n\nexport const updateFiles = async (userName, file, setStatus, setFiles) => {\n  if (file && userName) {\n    setStatus(\"updating\");\n    const formData = new FormData();\n    formData.append(\"user_name\", userName);\n    Array.from(file).forEach(file => {\n      const BASE_URL = \"http://localhost:8000/api\"; // Replace with your backend API base URL\n      formData.append(\"file\", file);\n    });\n    try {\n      const response = await fetch(`http://localhost:8000/api/files/file-update/`, {\n        method: \"PUT\",\n        body: formData\n      });\n      const data = await response.json(); // Parse response body as JSON\n\n      if (response.ok) {\n        setStatus(\"success\");\n        setFiles(null); // Clear files after successful upload\n      } else {\n        setStatus(\"fail\");\n        console.error(\"Upload failed:\", data.message);\n      }\n    } catch (error) {\n      console.error(error);\n      setStatus(\"fail\");\n    }\n  }\n};","map":{"version":3,"names":["updateFiles","userName","file","setStatus","setFiles","formData","FormData","append","Array","from","forEach","BASE_URL","response","fetch","method","body","data","json","ok","console","error","message"],"sources":["C:/Users/rong/file-upload-app/src/services/updateFiles.js"],"sourcesContent":["// const BASE_URL = \"http://localhost:8000/api\"; // Replace with your backend API base URL\r\n\r\n// export const updateFiles = async (\r\n//   userName,\r\n//   files,\r\n//   setUpdateStatus,\r\n//   setFiles\r\n// ) => {\r\n//   try {\r\n//     setUpdateStatus(\"updating\");\r\n//     const formData = new FormData();\r\n//     formData.append(\"userName\", userName);\r\n//     Array.from(files).forEach((file) => formData.append(\"files\", file));\r\n\r\n//     const response = await fetch(`${BASE_URL}/update-files/`, {\r\n//       method: \"PUT\",\r\n//       body: formData,\r\n//     });\r\n\r\n//     if (response.ok) {\r\n//       setFiles(null);\r\n//       setUpdateStatus(\"success\");\r\n//     } else {\r\n//       setUpdateStatus(\"fail\");\r\n//     }\r\n//   } catch (error) {\r\n//     console.error(\"Update failed:\", error);\r\n//     setUpdateStatus(\"fail\");\r\n//   }\r\n// };\r\n\r\nexport const updateFiles = async (userName, file, setStatus, setFiles) => {\r\n  if (file && userName) {\r\n    setStatus(\"updating\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"user_name\", userName);\r\n    Array.from(file).forEach((file) => {\r\n      const BASE_URL = \"http://localhost:8000/api\"; // Replace with your backend API base URL\r\n      formData.append(\"file\", file);\r\n    });\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8000/api/files/file-update/`,\r\n        {\r\n          method: \"PUT\",\r\n          body: formData,\r\n        }\r\n      );\r\n\r\n      const data = await response.json(); // Parse response body as JSON\r\n\r\n      if (response.ok) {\r\n        setStatus(\"success\");\r\n        setFiles(null); // Clear files after successful upload\r\n      } else {\r\n        setStatus(\"fail\");\r\n        console.error(\"Upload failed:\", data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setStatus(\"fail\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,WAAW,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,IAAI,EAAEC,SAAS,EAAEC,QAAQ,KAAK;EACxE,IAAIF,IAAI,IAAID,QAAQ,EAAE;IACpBE,SAAS,CAAC,UAAU,CAAC;IAErB,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEN,QAAQ,CAAC;IACtCO,KAAK,CAACC,IAAI,CAACP,IAAI,CAAC,CAACQ,OAAO,CAAER,IAAI,IAAK;MACjC,MAAMS,QAAQ,GAAG,2BAA2B,CAAC,CAAC;MAC9CN,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,IAAI,CAAC;IAC/B,CAAC,CAAC;IACF,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8CAA8C,EAC9C;QACEC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAEV;MACR,CACF,CAAC;MAED,MAAMW,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;;MAEpC,IAAIL,QAAQ,CAACM,EAAE,EAAE;QACff,SAAS,CAAC,SAAS,CAAC;QACpBC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,CAAC,MAAM;QACLD,SAAS,CAAC,MAAM,CAAC;QACjBgB,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEJ,IAAI,CAACK,OAAO,CAAC;MAC/C;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAACA,KAAK,CAAC;MACpBjB,SAAS,CAAC,MAAM,CAAC;IACnB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}