{"ast":null,"code":"// api.js\n\nconst BASE_URL = \"http://localhost:8000/api\"; // Replace with your backend API base URL\n\nexport const handleUpload = async (userName, files, setStatus, setFiles) => {\n  if (files && userName) {\n    setStatus(\"uploading\");\n    const formData = new FormData();\n    formData.append(\"user_name\", userName);\n    Array.from(files).forEach(file => {\n      formData.append(\"file\", file);\n    });\n    try {\n      const response = await fetch(\"http://localhost:8000/api/files/\", {\n        method: \"POST\",\n        body: formData\n      });\n      const data = await response.json(); // Parse response body as JSON\n\n      if (response.ok) {\n        setStatus(\"success\");\n        setFiles(null); // Clear files after successful upload\n      } else {\n        setStatus(\"fail\");\n        console.error(\"Upload failed:\", data.message);\n      }\n    } catch (error) {\n      console.error(error);\n      setStatus(\"fail\");\n    }\n  }\n};\nexport const updateFiles = async (userName, file, setStatus, setFiles) => {\n  if (file && userName) {\n    setStatus(\"updating\");\n    const formData = new FormData();\n    formData.append(\"user_name\", userName);\n    Array.from(file).forEach(file => {\n      formData.append(\"file\", file);\n    });\n    try {\n      const response = await fetch(`http://localhost:8000/api/files/file-update/`, {\n        method: \"PUT\",\n        body: formData\n      });\n      const data = await response.json(); // Parse response body as JSON\n\n      if (response.ok) {\n        setStatus(\"success\");\n        setFiles(null); // Clear files after successful upload\n      } else {\n        setStatus(\"fail\");\n        console.error(\"Upload failed:\", data.message);\n      }\n    } catch (error) {\n      console.error(error);\n      setStatus(\"fail\");\n    }\n  }\n};\nexport const getFileList = async (userName, files, setgetFileListStatus, setFiles) => {\n  try {\n    const response = await fetch(`${BASE_URL}/files-list/`, {\n      method: \"GET\"\n    });\n    const data = await response.json();\n    setFiles(data.files);\n    setgetFileListStatus(\"success\");\n  } catch (error) {\n    console.error(\"Failed to fetch file list:\", error);\n    setgetFileListStatus(\"fail\");\n  }\n};\nexport const deleteFile = async (userName, files, setDeleteStatus) => {\n  if (files && files.length > 0) {\n    // setDeleteStatus(\"deleting\");\n\n    try {\n      const response = await fetch(`${BASE_URL}/delete-files/`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_name: userName,\n          files_to_delete: files\n        })\n      });\n      if (response.ok) {\n        setDeleteStatus(\"success\");\n      } else {\n        const data = await response.json();\n        setDeleteStatus(\"fail\");\n        console.error(\"Delete failed:\", data.message);\n      }\n    } catch (error) {\n      console.error(\"Failed to delete files:\", error);\n      setDeleteStatus(\"fail\");\n    }\n  }\n};","map":{"version":3,"names":["BASE_URL","handleUpload","userName","files","setStatus","setFiles","formData","FormData","append","Array","from","forEach","file","response","fetch","method","body","data","json","ok","console","error","message","updateFiles","getFileList","setgetFileListStatus","deleteFile","setDeleteStatus","length","headers","JSON","stringify","user_name","files_to_delete"],"sources":["C:/Users/rong/file-upload-app/src/services/api.js"],"sourcesContent":["// api.js\r\n\r\nconst BASE_URL = \"http://localhost:8000/api\"; // Replace with your backend API base URL\r\n\r\nexport const handleUpload = async (userName, files, setStatus, setFiles) => {\r\n  if (files && userName) {\r\n    setStatus(\"uploading\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"user_name\", userName);\r\n    Array.from(files).forEach((file) => {\r\n      formData.append(\"file\", file);\r\n    });\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/api/files/\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n\r\n      const data = await response.json(); // Parse response body as JSON\r\n\r\n      if (response.ok) {\r\n        setStatus(\"success\");\r\n        setFiles(null); // Clear files after successful upload\r\n      } else {\r\n        setStatus(\"fail\");\r\n        console.error(\"Upload failed:\", data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setStatus(\"fail\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const updateFiles = async (userName, file, setStatus, setFiles) => {\r\n  if (file && userName) {\r\n    setStatus(\"updating\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"user_name\", userName);\r\n    Array.from(file).forEach((file) => {\r\n      formData.append(\"file\", file);\r\n    });\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:8000/api/files/file-update/`,\r\n        {\r\n          method: \"PUT\",\r\n          body: formData,\r\n        }\r\n      );\r\n\r\n      const data = await response.json(); // Parse response body as JSON\r\n\r\n      if (response.ok) {\r\n        setStatus(\"success\");\r\n        setFiles(null); // Clear files after successful upload\r\n      } else {\r\n        setStatus(\"fail\");\r\n        console.error(\"Upload failed:\", data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setStatus(\"fail\");\r\n    }\r\n  }\r\n};\r\n\r\nexport const getFileList = async (\r\n  userName,\r\n  files,\r\n  setgetFileListStatus,\r\n  setFiles\r\n) => {\r\n  try {\r\n    const response = await fetch(`${BASE_URL}/files-list/`, {\r\n      method: \"GET\",\r\n    });\r\n    const data = await response.json();\r\n    setFiles(data.files);\r\n    setgetFileListStatus(\"success\");\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch file list:\", error);\r\n    setgetFileListStatus(\"fail\");\r\n  }\r\n};\r\n\r\nexport const deleteFile = async (userName, files, setDeleteStatus) => {\r\n  if (files && files.length > 0) {\r\n    // setDeleteStatus(\"deleting\");\r\n\r\n    try {\r\n      const response = await fetch(`${BASE_URL}/delete-files/`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          user_name: userName,\r\n          files_to_delete: files,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        setDeleteStatus(\"success\");\r\n      } else {\r\n        const data = await response.json();\r\n        setDeleteStatus(\"fail\");\r\n        console.error(\"Delete failed:\", data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to delete files:\", error);\r\n      setDeleteStatus(\"fail\");\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}